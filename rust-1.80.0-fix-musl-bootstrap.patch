Since the Fedora source prep removes llvm-project, save the needed crt*.c files
outside that path and point the build system at them.  Also define build flags
that override the default packaging flags to work with musl.

--- a/src/bootstrap/src/core/build_steps/llvm.rs
+++ b/src/bootstrap/src/core/build_steps/llvm.rs
@@ -1208,8 +1208,8 @@
             return out_dir;
         }
 
-        let crtbegin_src = builder.src.join("src/llvm-project/compiler-rt/lib/builtins/crtbegin.c");
-        let crtend_src = builder.src.join("src/llvm-project/compiler-rt/lib/builtins/crtend.c");
+        let crtbegin_src = builder.src.join("crtbegin.c");
+        let crtend_src = builder.src.join("crtend.c");
         if up_to_date(&crtbegin_src, &out_dir.join("crtbeginS.o"))
             && up_to_date(&crtend_src, &out_dir.join("crtendS.o"))
         {
@@ -1242,6 +1242,7 @@
             .define("CRT_HAS_INITFINI_ARRAY", None)
             .define("EH_USE_FRAME_REGISTRY", None);
 
+        set_musl_flags(&mut cfg, &self.target);
         let objs = cfg.compile_intermediates();
         assert_eq!(objs.len(), 2);
         for obj in objs {
@@ -1337,6 +1338,7 @@
                 cfg.define("_LIBUNWIND_HIDE_SYMBOLS", "1");
                 cfg.define("_LIBUNWIND_IS_NATIVE_ONLY", "1");
             }
+            set_musl_flags(cfg, &self.target);
         }
 
         cc_cfg.compiler(builder.cc(self.target));
@@ -1411,3 +1413,18 @@
         out_dir
     }
 }
+
+fn set_musl_flags(cfg: &mut cc::Build, target: &TargetSelection) {
+    if !target.ends_with("-musl") {
+        return;
+    }
+
+    let mut arch = target.triple.split('-').next().unwrap();
+    if arch == "i686" {
+        arch = "i386";
+        cfg.flag("-m32");
+        cfg.flag("-fcf-protection=none");
+    }
+
+    cfg.flag(format!("--sysroot=/usr/{arch}-linux-musl").as_str());
+}
