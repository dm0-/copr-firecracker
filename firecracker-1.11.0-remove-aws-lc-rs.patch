The AWS libcrypto Rust crate is a ring-compatible API built on the libcrypto C
library and its libssl C++ library.  Packaging aws-lc-rs in Fedora would likely
require unbundling and integrating them into crypto-policies and/or special
review by the packaging committee and security team.  Upstream chose this crate
because it was submitted for FIPS certification.  Firecracker only uses it to
get some random bytes, so this reverts 246a308ef6d1054f7551ebeee7f0191b8518d2ad
to go back to the original implementation with the rand crate instead.  If FIPS
certification becomes necessary for the RPM, the ring crate is now also working
towards ceritifcation and is already in Fedora, so this patch could potentially
switch to that in the future.

--- a/resources/seccomp/aarch64-unknown-linux-musl.json
+++ b/resources/seccomp/aarch64-unknown-linux-musl.json
@@ -74,10 +74,6 @@
                 "syscall": "fstat",
                 "comment": "Used for drive patching & rescanning, for reading the local timezone from /etc/localtime"
             },
-            {
-                "syscall": "faccessat",
-                "comment": "Used by aws-lc-sys"
-            },
             {
                 "syscall": "ftruncate",
                 "comment": "Used for snapshotting"
@@ -112,7 +108,7 @@
             },
             {
               "syscall": "getrandom",
-              "comment": "getrandom is used by aws-lc library which we consume in virtio-rng"
+              "comment": "getrandom is used by virtio-rng to initialize the rand crate"
             },
             {
                 "syscall": "accept4",
@@ -214,7 +210,16 @@
             },
             {
                 "syscall": "madvise",
-                "comment": "Used by the VirtIO balloon device and by musl for some customer workloads. It is also used by aws-lc during random number generation. They setup a memory page that mark with MADV_WIPEONFORK to be able to detect forks. They also call it with -1 to see if madvise is supported in certain platforms." 
+                "comment": "Used by the VirtIO balloon device and by musl for some customer workloads",
+                "args": [
+                    {
+                        "index": 2,
+                        "type": "dword",
+                        "op": "eq",
+                        "val": 4,
+                        "comment": "libc::MADV_DONTNEED"
+                    }
+                ]
             },
             {
                 "syscall": "mmap",
--- a/resources/seccomp/x86_64-unknown-linux-musl.json
+++ b/resources/seccomp/x86_64-unknown-linux-musl.json
@@ -108,7 +108,7 @@
             },
             {
                 "syscall": "getrandom",
-                "comment": "getrandom is used by aws-lc library which we consume in virtio-rng"
+                "comment": "getrandom is used by virtio-rng to initialize the rand crate"
             },
             {
                 "syscall": "accept4",
@@ -210,7 +210,16 @@
             },
             {
                 "syscall": "madvise",
-                "comment": "Used by the VirtIO balloon device and by musl for some customer workloads. It is also used by aws-lc during random number generation. They setup a memory page that mark with MADV_WIPEONFORK to be able to detect forks. They also call it with -1 to see if madvise is supported in certain platforms."
+                "comment": "Used by the VirtIO balloon device and by musl for some customer workloads",
+                "args": [
+                    {
+                        "index": 2,
+                        "type": "dword",
+                        "op": "eq",
+                        "val": 4,
+                        "comment": "libc::MADV_DONTNEED"
+                    }
+                ]
             },
             {
                 "syscall": "mmap",
--- a/src/vmm/Cargo.toml
+++ b/src/vmm/Cargo.toml
@@ -12,7 +12,7 @@
 acpi_tables = { path = "../acpi-tables" } 
 aes-gcm =  { version = "0.10.1", default-features = false, features = ["aes"] }
 arrayvec = { version = "0.7.6", optional = true }
-aws-lc-rs = { version = "1.12.4", features = ["bindgen"] }
+rand = "0.8.5"
 base64 = "0.22.1"
 bincode = "1.2.1"
 bitflags = "2.8.0"
--- a/src/vmm/src/devices/acpi/vmgenid.rs
+++ b/src/vmm/src/devices/acpi/vmgenid.rs
@@ -2,9 +2,9 @@
 // SPDX-License-Identifier: Apache-2.0
 
 use acpi_tables::{aml, Aml};
-use aws_lc_rs::error::Unspecified as RandError;
-use aws_lc_rs::rand;
 use log::{debug, error};
+use rand::rngs::OsRng;
+use rand::RngCore;
 use serde::{Deserialize, Serialize};
 use vm_memory::{GuestAddress, GuestMemoryError};
 use vm_superio::Trigger;
@@ -45,7 +45,7 @@
     /// Error accessing VMGenID memory: {0}
     GuestMemory(#[from] GuestMemoryError),
     /// Create generation ID error: {0}
-    GenerationId(#[from] RandError),
+    GenerationId(#[from] rand::Error),
     /// Failed to allocate requested resource: {0}
     Allocator(#[from] vm_allocator::Error),
 }
@@ -100,9 +100,9 @@
     }
 
     // Create a 16-bytes random number
-    fn make_genid() -> Result<u128, RandError> {
+    fn make_genid() -> Result<u128, rand::Error> {
         let mut gen_id_bytes = [0u8; 16];
-        rand::fill(&mut gen_id_bytes)
+        OsRng.try_fill_bytes(&mut gen_id_bytes)
             .inspect_err(|err| error!("vmgenid: could not create new generation ID: {err}"))?;
         Ok(u128::from_le_bytes(gen_id_bytes))
     }
--- a/src/vmm/src/devices/virtio/rng/device.rs
+++ b/src/vmm/src/devices/virtio/rng/device.rs
@@ -5,7 +5,8 @@
 use std::sync::atomic::AtomicU32;
 use std::sync::Arc;
 
-use aws_lc_rs::rand;
+use rand::rngs::OsRng;
+use rand::RngCore;
 use vm_memory::GuestMemoryError;
 use vmm_sys_util::eventfd::EventFd;
 
@@ -31,7 +32,7 @@
     /// Bad guest memory buffer: {0}
     GuestMemory(#[from] GuestMemoryError),
     /// Could not get random bytes: {0}
-    Random(#[from] aws_lc_rs::error::Unspecified),
+    Random(#[from] rand::Error),
     /// Underlying IovDeque error: {0}
     IovDeque(#[from] IovDequeError),
 }
@@ -119,7 +120,7 @@
         }
 
         let mut rand_bytes = vec![0; self.buffer.len() as usize];
-        rand::fill(&mut rand_bytes).inspect_err(|_| {
+        OsRng.try_fill_bytes(&mut rand_bytes).inspect_err(|_| {
             METRICS.host_rng_fails.inc();
         })?;
 
